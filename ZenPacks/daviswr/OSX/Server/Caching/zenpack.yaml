name: ZenPacks.daviswr.OSX.Server.Caching

class_relationships:
  - Products.ZenModel.Device.Device(contentCachingService) 1:MC ContentCachingService(server)
  - ContentCachingService(contentCaches) 1:MC ContentCache(contentCachingService)
  - ContentCachingService(contentCachePeers) 1:MC ContentCachePeer(contentCachingService)

classes:
  DEFAULTS:
    base: [zenpacklib.Component]
  ContentCachingService:
    label: Content Caching Service
    short_label: Service
    plural_label: Content Caching Service
    plural_short_label: Service
    order: 10

    relationships:
      contentCachePeers:
        grid_display: false

    # Defaults for 10.13+ caches from
    # https://support.apple.com/guide/mac-help/configure-advanced-content-caching-settings-mchl91e7141a/mac
    properties:
      Active:
        label: Active
        type: boolean
        default: false
        enum: {true: "clear", false: "critical"}
        renderer: Zenoss.render.severity
        details_display: false
        content_width: 35
        label_width: 35
        order: 12

      AllowPersonalCaching:
        label: iCloud Caching
        short_label: iCloud
        type: boolean
        default: true
        grid_display: false
        order: 9

      CacheFree:
        label: Free Space
        short_label: Free
        type: int
        renderer: Zenoss.render.bytesString
        datapoint: caching_CacheFree
        order: 4

      CacheLimit:
        label: Size Limit
        short_label: Limit
        type: int
        default: 0
        renderer: Zenoss.render.bytesString
        order: 2

      CacheUsed:
        label: Used Space
        short_label: Used
        type: int
        renderer: Zenoss.render.bytesString
        datapoint: caching_CacheUsed
        order: 3

      DataPath:
        label: Path
        type: string
        default: "/Library/Application Support/Apple/AssetCache/Data"
        grid_display: false
        order: 1

      LogClientIdentity:
        label: Client Identity Logging
        type: boolean
        default: false
        grid_display: false
        order: 11

      LocalSubnetsOnly:
        label: Local Subnets Only
        short_label: Local Only
        type: boolean
        default: true
        grid_display: false
        order: 10

      Port:
        label: Port
        type: int
        grid_display: false
        order: 7

      ReservedVolumeSpace:
        label: Reserved Volume Space
        type: int
        default: 2000000000
        renderer: Zenoss.render.bytesString
        grid_display: false
        details_display: false
        order: 6

      RestrictedMedia:
        label: Restricted Media
        type: boolean
        default: false
        grid_display: false
        order: 8

      ServerGUID:
        label: Server GUID
        type: string
        grid_display: false
        details_display: false

      # Not supported by 10.13+ caches
      ServerRoot:
        label: Server Root
        type: string
        grid_display: false
        details_display: false
        order: 5


  ContentCache:
    label: Content Cache
    short_label: Cache
    order: 11

    relationships:
      contentCachingService:
        grid_display: false

    properties:
      BytesUsed:
        label: Size
        type: int
        renderer: Zenoss.render.bytesString
        datapoint: CacheDetails_BytesUsed
        order: 4

      # Not supported by 10.13+ caches
      Language:
        label: Local Language
        short_label: Language
        type: string
        grid_display: false
        details_display: false
        order: 2

      # Not supported by 10.13+ caches 
      LocalizedType:
        label: Localized Type
        short_label: Localization
        type: string
        grid_display: false
        details_display: false
        order: 3

      MediaType:
        label: Media Type
        short_label: Media
        type: string
        grid_display: false
        order: 1


  ContentCachePeer:
    label: Content Cache Peer
    short_label: Peer
    order: 12

    relationships:
      contentCachingService:
        grid_display: false

    properties:
      ac-power:
        label: AC Power
        type: boolean
        default: true
        grid_display: false
        order: 7

      address:
        label: IP Address
        type: string
        grid_display: false
        details_display: false
        order: 1

      cache-size:
        label: Size
        type: int
        renderer: Zenoss.render.bytesString
        grid_display: true
        order: 4

      friendly:
        label: Friendly
        type: boolean
        default: true
        grid_display: false
        order: 6

      guid:
        label: GUID
        type: string
        grid_display: false
        details_display: false

      healthy:
        label: Healthy
        type: boolean
        default: true
        enum: {true: "clear", false: "critical"}
        renderer: Zenoss.render.severity
        grid_display: true
        details_display: false
        content_width: 35
        label_width: 35
        order: 5

      is-portable:
        label: Portable
        type: boolean
        default: false
        grid_display: false
        order: 7

      # Not supported by 10.13+ caches
      port:
        label: Port
        type: string
        grid_display: false
        details_display: false
        order: 2

      version:
        label: Version
        type: string
        grid_display: false
        order: 3
     


device_classes:
  /:
    remove: false
    templates:
      ContentCachingService:
        targetPythonClass: ZenPacks.daviswr.OSX.Server.Caching.ContentCachingService
        description: macOS Content Caching service
        datasources:
          caching:
            type: COMMAND
            usessh: true
            #commandTemplate: "/usr/bin/sudo /Applications/Server.app/Contents/ServerRoot/usr/sbin/serveradmin fullstatus caching; /bin/echo \"caching:PackageCountCustom = `/usr/bin/sudo /bin/ls /Library/Server/Caching/Data/ | /usr/bin/fgrep -c -v -e AssetInfo -e tmp`\""
            commandTemplate: "/bin/bash -c 'IFS=\"\"; pkg_count=$$(/usr/bin/sudo /bin/ls ${here/DataPath}/ | /usr/bin/fgrep --count --invert-match --regexp AssetInfo --regexp tmp); if [ -e \"/usr/bin/AssetCacheManagerUtil\" ]; then status_cmd=\"/usr/bin/AssetCacheManagerUtil --json status 2>/dev/null\"; count_output=\"{\\\"PackageCountCustom\\\":$${pkg_count}}\"; else status_cmd=\"/usr/bin/sudo /Applications/Server.app/Contents/ServerRoot/usr/sbin/serveradmin fullstatus caching\"; count_output=\"caching:PackageCountCustom = $${pkg_count}\"; fi; eval $${status_cmd}; echo $${count_output}'"
            parser: ZenPacks.daviswr.OSX.Server.Caching.parsers.serveradmin
            cycletime: 60
            component: "${here/id}"
            datapoints:
              Active: GAUGE
              CacheFree: GAUGE
              CacheStatus: GAUGE
              CacheUsed: GAUGE
              PackageCountCustom: GAUGE
              RegistrationError: GAUGE
              RegistrationStatus: GAUGE
              StartupStatus: GAUGE
              state: GAUGE
              TotalBytesDropped: DERIVE_MIN_0
              TotalBytesImported: DERIVE_MIN_0
              TotalBytesReturned: DERIVE_MIN_0
              TotalBytesStored: DERIVE_MIN_0
              TotalBytesStoredFromOrigin: DERIVE_MIN_0
              TotalBytesStoredFromPeers: DERIVE_MIN_0

        thresholds:
          Status:
            type: MinMaxThreshold
            enabled: true
            severity: 3
            eventClass: /Status/MacContentCache
            minval: 1
            maxval: 1
            dsnames:
              - caching_Active
              - caching_CacheStatus
              - caching_RegistrationError
              - caching_RegistrationStatus
              - caching_StartupStatus
              - caching_state

        graphs:
          DEFAULTS:
            height: 100
            width: 500

          Cache Size:
            units: bytes
            # OS X reports size in powers of 10 rather than 2
            # but Zenoss.render.bytesString only does powers of 2
            base: true
            miny: 0
            graphpoints:
              DEFAULTS:
                lineType: AREA
                stacked: true
              Used:
                dpName: caching_CacheUsed
                colorindex: 0
              Free:
                dpName: caching_CacheFree
                color: cccccc

          Cached Packages:
            units: packages
            miny: 0
            graphpoints:
              Cached:
                lineType: AREA
                dpName: caching_PackageCountCustom
                colorindex: 0

          Cache Activity:
            units: bits/sec
            miny: 0
            graphpoints:
              DEFAULTS:
                lineType: LINE
                lineWidth: 2
                rpn: "8,*"
              Returned:
                dpName: caching_TotalBytesReturned
                colorindex: 0
              Stored:
                dpName: caching_TotalBytesStored
                colorindex: 1
              Dropped:
                dpName: caching_TotalBytesDropped
                colorindex: 2

          Cache Source Activity:
            units: bits/sec
            miny: 0
            graphpoints:
              DEFAULTS:
                lineType: LINE
                lineWidth: 2
                rpn: "8,*"
              Origin:
                dpName: caching_TotalBytesStoredFromOrigin
                colorindex: 0
              Peers:
                dpName: caching_TotalBytesStoredFromPeers
                colorindex: 1
              Imported:
                dpName: caching_TotalBytesImported
                colorindex: 2
            

      ContentCache:
        targetPythonClass: ZenPacks.daviswr.OSX.Server.Caching.ContentCache
        description: macOS Content Cache
        datasources:
          CacheDetails:
            type: COMMAND
            usessh: true
            #commandTemplate: "/usr/bin/sudo /Applications/Server.app/Contents/ServerRoot/usr/sbin/serveradmin fullstatus caching"
            commandTemplate: "/bin/bash -c 'if [ -e \"/usr/bin/AssetCacheManagerUtil\" ]; then status_cmd=\"/usr/bin/AssetCacheManagerUtil --json status 2>/dev/null\"; else status_cmd=\"/usr/bin/sudo /Applications/Server.app/Contents/ServerRoot/usr/sbin/serveradmin fullstatus caching\"; fi; eval $${status_cmd}'"
            parser: ZenPacks.daviswr.OSX.Server.Caching.parsers.serveradmin
            cycletime: 60
            component: "${here/id}"
            datapoints:
              BytesUsed: GAUGE

        graphs:
          DEFAULTS:
            height: 100
            width: 500

          Cache Used Space:
            units: bytes
            base: true
            miny: 0
            graphpoints:
              Used Space:
                dpName: CacheDetails_BytesUsed
                lineType: AREA
                colorindex: 0

      ContentCachePeer:
        targetPythonClass: ZenPacks.daviswr.OSX.Server.Caching.ContentCachePeer
        description: macOS Peer Content Cache Server
        datasources:
          Peers:
            type: COMMAND
            usessh: true
            #commandTemplate: "/usr/bin/sudo /Applications/Server.app/Contents/ServerRoot/usr/sbin/serveradmin fullstatus caching"
            commandTemplate: "/bin/bash -c 'if [ -e \"/usr/bin/AssetCacheManagerUtil\" ]; then status_cmd=\"/usr/bin/AssetCacheManagerUtil --json status 2>/dev/null\"; else status_cmd=\"/usr/bin/sudo /Applications/Server.app/Contents/ServerRoot/usr/sbin/serveradmin fullstatus caching\"; fi; eval $${status_cmd}'"
            parser: ZenPacks.daviswr.OSX.Server.Caching.parsers.serveradmin
            cycletime: 60
            component: "${here/id}"
            datapoints:
              healthy: GAUGE

        thresholds:
          PeerHealth:
            type: MinMaxThreshold
            enabled: true
            severity: 3
            eventClass: /Status/MacContentCache
            minval: 1
            maxval: 1
            dsnames:
              - Peers_healthy


process_class_organizers:
  macOS Content Cache:
    remove: true
    process_classes:
      DEFAULTS:
        excludeRegex: "\\b(vim|tail|grep|tar|cat|bash)\\b"
        fail_severity: 4
      servermgr_caching:
        description: Caching server
        includeRegex: servermgr_caching
        replaceRegex: "\\/.*\\/(.*servermgr_caching.*)"
        replacement: "\\1"
      AssetCache:
        description: Locally caches assets that were previously downloaded on your network
        includeRegex: "^/.*/usr/libexec/AssetCache/AssetCache"

event_classes:
  /Status/MacContentCache:
    remove: true
    description: macOS Content Cache events
    transform: |-
      from zenoss.protocols.protobufs.zep_pb2 import (
          SEVERITY_CLEAR,
          SEVERITY_WARNING,
          SEVERITY_ERROR
          )

      # Example: caching|caching_state|Status
      if (evt.eventKey.startswith('caching|caching_')
              and evt.eventKey.endswith('|Status')):

          current = int(float(evt.current))

          name = evt.eventKey.replace('caching|caching_', '').replace('|Status', '')
          if name.endswith('Status'):
              name = name[:-6]

          state_dict = dict()
          state_dict['Registration'] = {
              -1: 'is not registered',
              1: 'is registered',
              }
          state_dict['Cache'] = {
              1: 'is OK',
              2: 'is low on space',
              }
          state_dict['Startup'] = {
              1: 'startup is OK',
              2: 'startup is pending',
              3: 'startup has failed',
              4: 'startup is not auto-enabled',
              }
          state_dict['state'] = {
              1: 'is running',
              2: 'is starting',
              3: 'is stopped',
              }
          state_dict['RegistrationError'] = {
              3: 'registration error: wireless portable is not supported',
              4: 'registration error: invalid IP range',
              5: 'registration error: public IP not in range',
              6: 'registration error: too many private addresses',
              7: 'registration error: invalid device',
              }
          state_dict['Active'] = {
              0: 'is not active',
              1: 'is active',
              }

          status = state_dict.get(name, dict()).get(
              current,
              '{0} value unknown'.format(name)
              )
          evt.summary = 'Content Cache {0}'.format(status)

          sev_dict = {
              -1: SEVERITY_ERROR,
              0: SEVERITY_WARNING,
              1: SEVERITY_CLEAR,
              2: SEVERITY_WARNING,
              3: SEVERITY_ERROR,
              4: SEVERITY_ERROR,
              5: SEVERITY_ERROR,
              6: SEVERITY_ERROR,
              7: SEVERITY_ERROR,
              }
          evt.severity = sev_dict.get(current, SEVERITY_WARNING)

          # ZPL Components look for events in /Status rather than
          # /Status/ClassName to determine up/down status
          if current != 2:
              evt.eventClass = '/Status'

          if ('Active' == name or 'state' == name) and component is not None:
              bool_dict = {
                  0: False,
                  1: True,
                  }
              if component.Active != bool_dict.get(current, False):
                  @transact
                  def updateDb():
                      component.Active = bool_dict.get(current, False)
                  updateDb()

      elif 'Peers|Peers_healthy|PeerHealth' == evt.eventKey:
          current = int(float(evt.current))

          health_dict = {
              0: 'not healthy',
              1: 'healthy',
              }

          status = health_dict.get(current, 'unknown')
          evt.summary = 'Peer {0} is {1}'.format(evt.component, status)

          sev_dict = {
              0: SEVERITY_WARNING,
              1: SEVERITY_CLEAR,
              }
          evt.severity = sev_dict.get(current, SEVERITY_WARNING)

          evt.eventClass = '/Status'

          if component is not None:
              bool_dict = {
                  1: True,
                  2: False
                  }
              if component.healthy != bool_dict.get(current, False):
                  @transact
                  def updateDb():
                      component.healthy = bool_dict.get(current, False)
                  updateDb()
