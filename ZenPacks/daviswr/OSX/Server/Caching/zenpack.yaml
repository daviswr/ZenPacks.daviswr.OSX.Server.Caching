name: ZenPacks.daviswr.OSX.Server.Caching

class_relationships:
  - Products.ZenModel.Device.Device(cachingService) 1:MC CachingService(server)
  - CachingService(caches) 1:MC Cache(cachingService)

classes:
  DEFAULTS:
    base: [zenpacklib.Component]
  CachingService:
    label: Content Caching Service
    short_label: Service
    plural_label: Content Caching Service
    plural_short_label: Service
    order: 10

    properties:
      Active:
        label: Active
        type: boolean
        default: false
        enum: {true: "clear", false: "critical"}
        renderer: Zenoss.render.severity
        details_display: false
        content_width: 35
        label_width: 35
        order: 12

      AllowPersonalCaching:
        label: iCloud Caching
        short_label: iCloud
        type: boolean
        default: true
        grid_display: false
        order: 9

      DataPath:
        label: Path
        type: string
        grid_display: false
        order: 1

      CacheFree:
        label: Free Space
        short_label: Free
        type: int
        renderer: Zenoss.render.bytesString
        datapoint: caching_CacheFree
        order: 4

      CacheLimit:
        label: Size Limit
        short_label: Limit
        type: int
        renderer: Zenoss.render.bytesString
        order: 2

      CacheUsed:
        label: Used Space
        short_label: Used
        type: int
        renderer: Zenoss.render.bytesString
        datapoint: caching_CacheUsed
        order: 3

      LogClientIdentity:
        label: Client Identity Logging
        type: boolean
        default: true
        grid_display: false
        order: 11

      LocalSubnetsOnly:
        label: Local Subnets Only
        short_label: Local Only
        type: boolean
        default: true
        grid_display: false
        order: 10

      Port:
        label: Port
        type: int
        grid_display: false
        order: 7

      ReservedVolumeSpace:
        label: Reserved Volume Space
        type: int
        renderer: Zenoss.render.bytesString
        grid_display: false
        order: 6

      RestrictedMedia:
        label: Restricted Media
        type: boolean
        default: false
        grid_display: false
        order: 8

      ServerGUID:
        label: Server GUID
        type: string
        grid_display: false
        details_display: false

      ServerRoot:
        label: Server Root
        type: string
        grid_display: false
        order: 5


  Cache:
    label: Content Cache
    short_label: Cache
    order: 11

    relationships:
      cachingService:
        grid_display: false

    properties:
      BytesUsed:
        label: Size
        type: int
        renderer: Zenoss.render.bytesString
        datapoint: CacheDetails_BytesUsed
        order: 4

      Language:
        label: Local Language
        short_label: Language
        type: string
        grid_display: false
        order: 2

      LocalizedType:
        label: Localized Type
        short_label: Localization
        type: string
        grid_display: false
        order: 3

      MediaType:
        label: Media Type
        short_label: Media
        type: string
        grid_display: false
        order: 1


device_classes:
  /:
    remove: false
    templates:
      ContentCachingService:
        targetPythonClass: ZenPacks.daviswr.OSX.Server.Caching.CachingService
        description: macOS Content Caching service
        datasources:
          caching:
            type: COMMAND
            usessh: true
            commandTemplate: "/usr/bin/sudo /Applications/Server.app/Contents/ServerRoot/usr/sbin/serveradmin fullstatus caching; /bin/echo \"caching:PackageCountCustom = `/usr/bin/sudo /bin/ls /Library/Server/Caching/Data/ | /usr/bin/fgrep -c -v -e AssetInfo -e tmp`\""
            parser: ZenPacks.daviswr.OSX.Server.Caching.parsers.serveradmin
            cycletime: 60
            component: "${here/id}"
            datapoints:
              CacheFree: GAUGE
              CacheStatus: GAUGE
              CacheUsed: GAUGE
              PackageCountCustom: GAUGE
              RegistrationStatus: GAUGE
              StartupStatus: GAUGE
              state: GAUGE
              TotalBytesDropped: DERIVE_MIN_0
              TotalBytesImported: DERIVE_MIN_0
              TotalBytesReturned: DERIVE_MIN_0
              TotalBytesStored: DERIVE_MIN_0
              TotalBytesStoredFromOrigin: DERIVE_MIN_0
              TotalBytesStoredFromPeers: DERIVE_MIN_0

        thresholds:
          Status:
            type: MinMaxThreshold
            enabled: true
            severity: 3
            eventClass: /Status/MacContentCache
            minval: 1
            maxval: 1
            dsnames:
              - caching_CacheStatus
              - caching_RegistrationStatus
              - caching_StartupStatus
              - caching_state

        graphs:
          DEFAULTS:
            height: 100
            width: 500

          Cache Size:
            units: bytes
            # OS X reports size in powers of 10 rather than 2
            # but Zenoss.render.bytesString only does powers of 2
            base: true
            miny: 0
            graphpoints:
              DEFAULTS:
                lineType: AREA
                stacked: true
              Used:
                dpName: caching_CacheUsed
                colorindex: 0
              Free:
                dpName: caching_CacheFree
                color: cccccc

          Cached Packages:
            units: packages
            miny: 0
            graphpoints:
              Cached:
                lineType: AREA
                dpName: caching_PackageCountCustom
                colorindex: 0

          Cache Activity:
            units: bits/sec
            miny: 0
            graphpoints:
              DEFAULTS:
                lineType: LINE
                lineWidth: 2
                rpn: "8,*"
              Returned:
                dpName: caching_TotalBytesReturned
                colorindex: 0
              Stored:
                dpName: caching_TotalBytesStored
                colorindex: 1
              Dropped:
                dpName: caching_TotalBytesDropped
                colorindex: 2

          Cache Source Activity:
            units: bits/sec
            miny: 0
            graphpoints:
              DEFAULTS:
                lineType: LINE
                lineWidth: 2
                rpn: "8,*"
              Origin:
                dpName: caching_TotalBytesStoredFromOrigin
                colorindex: 0
              Peers:
                dpName: caching_TotalBytesStoredFromPeers
                colorindex: 1
              Imported:
                dpName: caching_TotalBytesImported
                colorindex: 2
            

      ContentCache:
        targetPythonClass: ZenPacks.daviswr.OSX.Server.Caching.Cache
        description: macOS Content Cache
        datasources:
          CacheDetails:
            type: COMMAND
            usessh: true
            commandTemplate: "/usr/bin/sudo /Applications/Server.app/Contents/ServerRoot/usr/sbin/serveradmin fullstatus caching"
            parser: ZenPacks.daviswr.OSX.Server.Caching.parsers.serveradmin
            cycletime: 60
            component: "${here/id}"
            datapoints:
              BytesUsed: GAUGE

        graphs:
          DEFAULTS:
            height: 100
            width: 500

          Cache Used Space:
            units: bytes
            base: true
            miny: 0
            graphpoints:
              Used Space:
                dpName: CacheDetails_BytesUsed
                lineType: AREA
                colorindex: 0


process_class_organizers:
  macOS Content Cache:
    remove: true
    process_classes:
      DEFAULTS:
        excludeRegex: "\\b(vim|tail|grep|tar|cat|bash)\\b"
        fail_severity: 4
      servermgr_caching:
        description: Caching server
        includeRegex: servermgr_caching
        replaceRegex: "\\/.*\\/(.*servermgr_caching.*)"
        replacement: "\\1"
      AssetCache:
        description: Locally caches assets that were previously downloaded on your network
        includeRegex: /usr/libexec/AssetCache/AssetCache

event_classes:
  /Status/MacContentCache:
    remove: true
    description: macOS Content Cache events
    transform: |-
      from zenoss.protocols.protobufs import zep_pb2

      # Example: caching|caching_state|Status
      if evt.eventKey.startswith('caching|caching_') \
          and evt.eventKey.endswith('|Status'):

          current = int(float(evt.current))

          name = evt.eventKey.replace('caching|caching_', '').replace('|Status', '')
          if name.endswith('Status'):
              name = name[:-6]
          else:
              name = name.title()

          state_dict = dict()
          state_dict['Cache'] = {1: 'OK'}
          state_dict['Registration'] = state_dict['Cache']
          state_dict['Startup'] = {
              1: 'OK',
              2: 'pending',
              }
          state_dict['State'] = {
              1: 'running',
              2: 'starting',
              3: 'stopped',
              }
          status = state_dict.get(name, dict()).get(current, 'unknown')
          evt.summary = '{0} is {1}'.format(name, status)

          sev_dict = {
              1: zep_pb2.SEVERITY_CLEAR,
              2: zep_pb2.SEVERITY_WARNING,
              3: zep_pb2.SEVERITY_ERROR,
              }
          evt.severity = sev_dict.get(current, zep_pb2.SEVERITY_WARNING)

          # ZPL Components look for events in /Status rather than
          # /Status/ClassName to determine up/down status
          evt.eventClass = '/Status'

          # Based on stock /Status/Perf class transform for ifOperStatus events
          if component is not None:
              bool_dict = {1: True, 2: False, 3: False}
              if component.Active != bool_dict.get(current, False):
                  @transact
                  def updateDb():
                      component.Active = bool_dict.get(current, False)
                  updateDb()
