name: ZenPacks.daviswr.OSX.Server.Caching

class_relationships:
  - Products.ZenModel.Device.Device(contentCachingService) 1:MC ContentCachingService(server)
  - ContentCachingService(contentCaches) 1:MC ContentCache(contentCachingService)
  - ContentCachingService(contentCachePeers) 1:MC ContentCachePeer(contentCachingService)

classes:
  DEFAULTS:
    base: [zenpacklib.Component]
  ContentCachingService:
    label: Content Caching Service
    short_label: Service
    plural_label: Content Caching Service
    plural_short_label: Service
    order: 10

    relationships:
      contentCachePeers:
        grid_display: false

    # Defaults for 10.13+ caches from
    # https://support.apple.com/guide/mac-help/configure-advanced-content-caching-settings-mchl91e7141a/mac
    properties:
      Active:
        label: Active
        type: boolean
        default: false
        enum: {true: "clear", false: "critical"}
        renderer: Zenoss.render.severity
        details_display: false
        content_width: 35
        label_width: 35
        order: 12

      AllowPersonalCaching:
        label: iCloud Caching
        short_label: iCloud
        type: boolean
        default: true
        grid_display: false
        order: 9

      # macOS reports size in powers of 10 rather than 2
      # but Zenoss.render.bytesString only does powers of 2
      CacheFree:
        label: Free Space
        short_label: Free
        type: int
        renderer: Zenoss.render.bytesString
        datapoint: caching_CacheFree
        order: 4

      CacheLimit:
        label: Size Limit
        short_label: Limit
        type: int
        default: 0
        renderer: Zenoss.render.bytesString
        order: 2

      CacheUsed:
        label: Used Space
        short_label: Used
        type: int
        renderer: Zenoss.render.bytesString
        datapoint: caching_CacheUsed
        order: 3

      DataPath:
        label: Path
        type: string
        default: "/Library/Application Support/Apple/AssetCache/Data"
        grid_display: false
        order: 1

      LogClientIdentity:
        label: Client Identity Logging
        type: boolean
        default: false
        grid_display: false
        order: 11

      LocalSubnetsOnly:
        label: Local Subnets Only
        short_label: Local Only
        type: boolean
        default: true
        grid_display: false
        order: 10

      Port:
        label: Port
        type: int
        grid_display: false
        order: 7

      ReservedVolumeSpace:
        label: Reserved Volume Space
        type: int
        default: 2000000000
        renderer: Zenoss.render.bytesString
        grid_display: false
        details_display: false
        order: 6

      RestrictedMedia:
        label: Restricted Media
        type: boolean
        default: false
        grid_display: false
        order: 8

      ServerGUID:
        label: Server GUID
        type: string
        grid_display: false
        details_display: false

      # Not supported by 10.13+ caches
      ServerRoot:
        label: Server Root
        type: string
        grid_display: false
        details_display: false
        order: 5


  ContentCache:
    label: Content Cache
    short_label: Cache
    order: 11

    relationships:
      contentCachingService:
        grid_display: false

    properties:
      BytesUsed:
        label: Size
        type: int
        renderer: Zenoss.render.bytesString
        datapoint: CacheDetails_BytesUsed
        order: 4

      # Not supported by 10.13+ caches
      Language:
        label: Local Language
        short_label: Language
        type: string
        grid_display: false
        details_display: false
        order: 2

      # Not supported by 10.13+ caches
      LocalizedType:
        label: Localized Type
        short_label: Localization
        type: string
        grid_display: false
        details_display: false
        order: 3

      MediaType:
        label: Media Type
        short_label: Media
        type: string
        grid_display: false
        order: 1


  ContentCachePeer:
    label: Content Cache Peer
    short_label: Peer
    order: 12

    relationships:
      contentCachingService:
        grid_display: false

    properties:
      ac-power:
        label: AC Power
        type: boolean
        default: true
        grid_display: false
        order: 8

      address:
        label: IP Address
        type: string
        grid_display: false
        details_display: true
        order: 1

      cache-size:
        label: Size
        type: int
        renderer: Zenoss.render.bytesString
        grid_display: true
        order: 4

      friendly:
        label: Friendly
        type: boolean
        default: true
        grid_display: false
        order: 7

      guid:
        label: GUID
        type: string
        grid_display: false
        details_display: false

      healthy:
        label: Healthy
        type: boolean
        default: true
        enum: {true: "clear", false: "critical"}
        renderer: Zenoss.render.severity
        grid_display: true
        details_display: false
        content_width: 35
        label_width: 35
        order: 5

      is-parent:
        label: Parent
        type: boolean
        default: false
        enum: {true: "clear", false: "debug"}
        renderer: Zenoss.render.severity
        grid_display: true
        details_display: false
        content_width: 35
        label_width: 35
        order: 6

      is-portable:
        label: Portable
        type: boolean
        default: false
        grid_display: false
        order: 9

      port:
        label: Port
        type: string
        grid_display: false
        details_display: true
        order: 2

      version:
        label: Version
        type: string
        grid_display: false
        order: 3


device_classes:
  /:
    remove: false
    templates:
      ContentCachingService:
        targetPythonClass: ZenPacks.daviswr.OSX.Server.Caching.ContentCachingService
        description: macOS Content Caching service
        datasources:
          caching:
            type: COMMAND
            usessh: true
            commandTemplate: |-
              $$ZENOTHING
              IFS=""
              pkg_count=$$(/usr/bin/env sudo ls ${here/DataPath}/ | fgrep --count --invert-match --regexp AssetInfo --regexp tmp)
              if [ -e "/usr/bin/AssetCacheManagerUtil" ]
              then
                  /usr/bin/AssetCacheManagerUtil --json status 2>/dev/null
                  echo "{\"PackageCountCustom\":$$pkg_count}"
              else
                  /usr/bin/env sudo /Applications/Server.app/Contents/ServerRoot/usr/sbin/serveradmin fullstatus caching
                  echo "caching:PackageCountCustom = $$pkg_count"
              fi

            parser: ZenPacks.daviswr.OSX.Server.Caching.parsers.serveradmin
            cycletime: 60
            component: "${here/id}"
            datapoints:
              Active: GAUGE
              CacheFree: GAUGE
              CacheHitRatioCustom: GAUGE
              CacheStatus: GAUGE
              CacheUsed: GAUGE
              DiskExceededCustom: GAUGE
              PackageCountCustom: GAUGE
              RegistrationError: GAUGE
              RegistrationStatus: GAUGE
              StartupStatus: GAUGE
              state: GAUGE
              TotalBytesDropped: DERIVE_MIN_0
              TotalBytesImported: DERIVE_MIN_0
              TotalBytesReturned: DERIVE_MIN_0
              TotalBytesStored: DERIVE_MIN_0
              TotalBytesStoredFromOrigin: DERIVE_MIN_0
              TotalBytesStoredFromPeers: DERIVE_MIN_0

          metrics:
            type: COMMAND
            usessh: true
            commandTemplate: |-
              $$ZENOTHING
              date_today=$$(date -j '+%Y-%m-%d')
              if [ -e "/usr/bin/AssetCacheManagerUtil" ]
              then
                  db_path="/Library/Application Support/Apple/AssetCache/Metrics/Metrics.db"
                  sqlite3 -line "$$db_path" "\
                    SELECT Sum(ZBYTESDROPPED) AS 'bytes.dropped',\
                           Sum(ZBYTESFROMCACHETOCLIENT) AS 'bytes.fromcache.toclients',\
                           Sum(ZBYTESFROMCACHETOPEER) AS 'bytes.fromcache.topeers',\
                           Sum(ZBYTESFROMORIGINTOCLIENT) AS 'bytes.fromorigin.toclients',\
                           Sum(ZBYTESFROMORIGINTOPEER) AS 'bytes.fromorigin.topeers',\
                           Sum(ZBYTESFROMPEERTOCLIENT) AS 'bytes.frompeers.toclients',\
                           Sum(ZBYTESIMPORTEDBYHTTP) AS 'bytes.imported.byhttp',\
                           Sum(ZBYTESIMPORTEDBYXPC) AS 'bytes.imported.byxpc',\
                           Sum(ZBYTESPURGEDTOTAL) AS 'bytes.purged.total',\
                           Sum(ZBYTESPURGEDYOUNGERTHAN1DAY) AS 'bytes.purged.youngerthan1day',\
                           Sum(ZBYTESPURGEDYOUNGERTHAN30DAYS) AS 'bytes.purged.youngerthan30days',\
                           Sum(ZBYTESPURGEDYOUNGERTHAN7DAYS) AS 'bytes.purged.youngerthan7days',\
                           Sum(ZIMPORTSBYHTTP) AS 'imports.byhttp',\
                           Sum(ZIMPORTSBYXPC) AS 'imports.byxpc',\
                           Sum(ZREPLIESFROMCACHETOCLIENT) AS 'replies.fromcache.toclients',\
                           Sum(ZREPLIESFROMCACHETOPEER) AS 'replies.fromcache.topeers',\
                           Sum(ZREPLIESFROMORIGINTOCLIENT) AS 'replies.fromorigin.toclients',\
                           Sum(ZREPLIESFROMORIGINTOPEER) AS 'replies.fromorigin.topeers',\
                           Sum(ZREPLIESFROMPEERTOCLIENT) AS 'replies.frompeers.toclients',\
                           Sum(ZREQUESTSFROMCLIENT) AS 'requests.fromclients',\
                           Sum(ZREQUESTSFROMPEER) AS 'requests.frompeers'\
                    FROM ZMETRIC WHERE Date(978307200 + ZCREATIONDATE, 'unixepoch') = '$$date_today'"
              else
                  db_path="${here/ServerRoot}/Caching/Logs/Metrics.sqlite"
                  query_body="FROM statsData WHERE Date(collectionDate, 'unixepoch') = '$$date_today' AND metricName ="
                  sqlite3 -line "$$db_path" "\
                      SELECT Sum(dataValue) AS 'bytes.dropped' $$query_body 'bytes.dropped';\
                      SELECT Sum(dataValue) AS 'bytes.fromcache.toclients' $$query_body 'bytes.fromcache.toclients';\
                      SELECT Sum(dataValue) AS 'bytes.fromcache.topeers' $$query_body 'bytes.fromcache.topeers';\
                      SELECT Sum(dataValue) AS 'bytes.fromorigin.toclients' $$query_body 'bytes.fromorigin.toclients';\
                      SELECT Sum(dataValue) AS 'bytes.fromorigin.topeers' $$query_body 'bytes.fromorigin.topeers';\
                      SELECT Sum(dataValue) AS 'bytes.frompeers.toclients' $$query_body 'bytes.frompeers.toclients';\
                      SELECT Sum(dataValue) AS 'bytes.imported.byhttp' $$query_body 'bytes.imported.byhttp';\
                      SELECT Sum(dataValue) AS 'bytes.imported.byxpc' $$query_body 'bytes.imported.byxpc';\
                      SELECT Sum(dataValue) AS 'bytes.purged.total' $$query_body 'bytes.purged.total';\
                      SELECT Sum(dataValue) AS 'bytes.purged.youngerthan1day' $$query_body 'bytes.purged.youngerthan1day';\
                      SELECT Sum(dataValue) AS 'bytes.purged.youngerthan30days' $$query_body 'bytes.purged.youngerthan30days';\
                      SELECT Sum(dataValue) AS 'bytes.purged.youngerthan7days' $$query_body 'bytes.purged.youngerthan7days';\
                      SELECT Sum(dataValue) AS 'imports.byhttp' $$query_body 'imports.byhttp';\
                      SELECT Sum(dataValue) AS 'imports.byxpc' $$query_body 'imports.byxpc';\
                      SELECT Sum(dataValue) AS 'replies.fromcache.toclients' $$query_body 'replies.fromcache.toclients';\
                      SELECT Sum(dataValue) AS 'replies.fromcache.topeers' $$query_body 'replies.fromcache.topeers';\
                      SELECT Sum(dataValue) AS 'replies.fromorigin.toclients' $$query_body 'replies.fromorigin.toclients';\
                      SELECT Sum(dataValue) AS 'replies.fromorigin.topeers' $$query_body 'replies.fromorigin.topeers';\
                      SELECT Sum(dataValue) AS 'replies.frompeers.toclients' $$query_body 'replies.frompeers.toclients';\
                      SELECT Sum(dataValue) AS 'requests.fromclients' $$query_body 'requests.fromclients';\
                      SELECT Sum(dataValue) AS 'requests.frompeers' $$query_body 'requests.frompeers'"
              fi

            parser: ZenPacks.daviswr.OSX.Server.Caching.parsers.sqlite
            cycletime: 60
            component: "${here/id}"
            datapoints:
              bytes.dropped: DERIVE_MIN_0
              bytes.fromcache.toclients: DERIVE_MIN_0
              bytes.fromcache.topeers: DERIVE_MIN_0
              bytes.fromorigin.toclients: DERIVE_MIN_0
              bytes.fromorigin.topeers: DERIVE_MIN_0
              bytes.frompeers.toclients: DERIVE_MIN_0
              bytes.imported.byhttp: DERIVE_MIN_0
              bytes.imported.byxpc: DERIVE_MIN_0
              bytes.purged.total: DERIVE_MIN_0
              bytes.purged.youngerthan1day: DERIVE_MIN_0
              bytes.purged.youngerthan30days: DERIVE_MIN_0
              bytes.purged.youngerthan7days: DERIVE_MIN_0
              imports.byhttp: DERIVE_MIN_0
              imports.byxpc: DERIVE_MIN_0
              replies.fromcache.toclients: DERIVE_MIN_0
              replies.fromcache.topeers: DERIVE_MIN_0
              replies.fromorigin.toclients: DERIVE_MIN_0
              replies.fromorigin.topeers: DERIVE_MIN_0
              replies.frompeers.toclients: DERIVE_MIN_0
              requests.fromclients: DERIVE_MIN_0
              requests.frompeers: DERIVE_MIN_0

        thresholds:
          Status:
            type: MinMaxThreshold
            enabled: true
            severity: 3
            eventClass: /Status/MacContentCache
            minval: 1
            maxval: 1
            dsnames:
              - caching_Active
              - caching_CacheStatus
              - caching_RegistrationError
              - caching_RegistrationStatus
              - caching_StartupStatus
              - caching_state
              - caching_DiskExceededCustom

        graphs:
          DEFAULTS:
            height: 100
            width: 500
            miny: 0

          Cache Size:
            units: bytes
            base: true
            graphpoints:
              DEFAULTS:
                lineType: AREA
                stacked: true
              Used:
                dpName: caching_CacheUsed
                colorindex: 0
              Free:
                dpName: caching_CacheFree
                color: cccccc

          Cached Packages:
            units: packages
            graphpoints:
              Cached:
                dpName: caching_PackageCountCustom
                lineType: AREA
                format: "%5.0lf"
                colorindex: 0

          Cache Activity:
            units: bits/sec
            graphpoints:
              DEFAULTS:
                lineType: LINE
                lineWidth: 2
                rpn: "8,*"
              Returned:
                dpName: caching_TotalBytesReturned
                colorindex: 0
              Stored:
                dpName: caching_TotalBytesStored
                colorindex: 1
              Dropped:
                dpName: caching_TotalBytesDropped
                colorindex: 2

          Cache Source Activity:
            units: bits/sec
            graphpoints:
              DEFAULTS:
                lineType: LINE
                lineWidth: 2
                rpn: "8,*"
              Origin:
                dpName: caching_TotalBytesStoredFromOrigin
                colorindex: 0
              Peers:
                dpName: caching_TotalBytesStoredFromPeers
                colorindex: 1
              Imported:
                dpName: caching_TotalBytesImported
                colorindex: 2

          Cache Hit Ratio:
            units: ratio
            miny: 1
            graphpoints:
              Ratio:
                dpName: caching_CacheHitRatioCustom
                lineType: LINE
                lineWidth: 2
                format: "%5.2lf"
                colorindex: 0

      ContentCache:
        targetPythonClass: ZenPacks.daviswr.OSX.Server.Caching.ContentCache
        description: macOS Content Cache
        datasources:
          CacheDetails:
            type: COMMAND
            usessh: true
            commandTemplate: |-
              $$ZENOTHING
              if [ -e "/usr/bin/AssetCacheManagerUtil" ]
              then
                  /usr/bin/AssetCacheManagerUtil --json status 2>/dev/null
              else
                  /usr/bin/env sudo /Applications/Server.app/Contents/ServerRoot/usr/sbin/serveradmin fullstatus caching
              fi

            parser: ZenPacks.daviswr.OSX.Server.Caching.parsers.serveradmin
            cycletime: 60
            component: "${here/id}"
            datapoints:
              BytesUsed: GAUGE

        graphs:
          DEFAULTS:
            height: 100
            width: 500

          Cache Used Space:
            units: bytes
            base: true
            miny: 0
            graphpoints:
              Used Space:
                dpName: CacheDetails_BytesUsed
                lineType: AREA
                colorindex: 0

      ContentCachePeer:
        targetPythonClass: ZenPacks.daviswr.OSX.Server.Caching.ContentCachePeer
        description: macOS Peer Content Cache Server
        datasources:
          Peers:
            type: COMMAND
            usessh: true
            commandTemplate: |-
              $$ZENOTHING
              if [ -e "/usr/bin/AssetCacheManagerUtil" ]
              then
                  /usr/bin/AssetCacheManagerUtil --json status 2>/dev/null
              else
                  /usr/bin/env sudo /Applications/Server.app/Contents/ServerRoot/usr/sbin/serveradmin fullstatus caching
              fi

            parser: ZenPacks.daviswr.OSX.Server.Caching.parsers.serveradmin
            cycletime: 60
            component: "${here/id}"
            datapoints:
              healthy: GAUGE

        thresholds:
          PeerHealth:
            type: MinMaxThreshold
            enabled: true
            severity: 3
            eventClass: /Status/MacContentCache
            minval: 1
            maxval: 1
            dsnames:
              - Peers_healthy


process_class_organizers:
  macOS Content Cache:
    remove: true
    process_classes:
      DEFAULTS:
        excludeRegex: "\\b(vim|tail|grep|tar|cat|bash)\\b"
        fail_severity: 4

      servermgr_caching:
        description: Caching server
        includeRegex: servermgr_caching
        replaceRegex: "\\/.*\\/(.*servermgr_caching.*)"
        replacement: "\\1"

      AssetCache:
        description: Locally caches assets that were previously downloaded on your network
        includeRegex: "/usr/libexec/AssetCache/AssetCache"
        replaceRegex: ".*"
        replacement: AssetCache

      AssetCacheServices:
        description: Service to manage macOS Content Caching
        includeRegex: "AssetCacheServicesExtensions"
        replaceRegex: ".*\\/(\\w+).xpc\\/.*"
        replacement: "\\1"

event_classes:
  /Status/MacContentCache:
    remove: true
    description: macOS Content Cache events
    transform: |-
      from zenoss.protocols.protobufs.zep_pb2 import (
          SEVERITY_CLEAR,
          SEVERITY_WARNING,
          SEVERITY_ERROR
          )

      current = int(float(evt.current))

      # Example: caching|caching_state|Status
      if (evt.eventKey.startswith('caching|caching_')
              and evt.eventKey.endswith('|Status')):

          name = evt.eventKey.replace('caching|caching_', '').replace('|Status', '')
          if name.endswith('Status'):
              name = name[:-6]

          state_dict = dict()
          state_dict['Registration'] = {
              -1: 'is not registered',
              0: 'is attempting registration',
              1: 'is registered',
              }
          state_dict['Cache'] = {
              1: 'is OK',
              2: 'is low on space',
              }
          state_dict['Startup'] = {
              1: 'startup is OK',
              2: 'startup is pending',
              3: 'startup has failed',
              4: 'startup is not auto-enabled',
              }
          state_dict['state'] = {
              1: 'is running',
              2: 'is starting',
              3: 'is stopped',
              }
          state_dict['RegistrationError'] = {
              3: 'registration error: wireless portable is not supported',
              4: 'registration error: invalid IP range',
              5: 'registration error: public IP not in range',
              6: 'registration error: too many private addresses',
              7: 'registration error: invalid device',
              8: 'registration error: not activated',
              }
          state_dict['Active'] = {
              0: 'is not active',
              1: 'is active',
              }
          state_dict['DiskExceededCustom'] = {
              1: 'size is within available volume capacity',
              2: 'size exceeds available volume capacity',
              }

          status = state_dict.get(name, dict()).get(
              current,
              '{0} value unknown'.format(name)
              )
          evt.summary = 'Content Cache {0}'.format(status)

          sev_dict = {
              -1: SEVERITY_ERROR,
              0: SEVERITY_WARNING,
              1: SEVERITY_CLEAR,
              2: SEVERITY_WARNING,
              3: SEVERITY_ERROR,
              4: SEVERITY_ERROR,
              5: SEVERITY_ERROR,
              6: SEVERITY_ERROR,
              7: SEVERITY_ERROR,
              8: SEVERITY_ERROR,
              }
          evt.severity = sev_dict.get(current, SEVERITY_WARNING)

          # ZPL Components look for events in /Status rather than
          # /Status/ClassName to determine up/down status
          if current != 2 and name != 'DiskExceededCustom':
              evt.eventClass = '/Status'

          if (name in ['Active', 'state']
                  and component
                  and hasattr(component, 'Active')):
              bool_dict = {
                  0: False,
                  1: True,
                  3: False,
                  }
              if component.Active != bool_dict.get(current, False):
                  @transact
                  def updateDb():
                      component.Active = bool_dict.get(current, False)
                  updateDb()

      elif 'Peers|Peers_healthy|PeerHealth' == evt.eventKey:
          health_dict = {
              0: 'not healthy',
              1: 'healthy',
              }

          status = health_dict.get(current, 'unknown')
          evt.summary = 'Peer {0} is {1}'.format(evt.component, status)

          sev_dict = {
              0: SEVERITY_WARNING,
              1: SEVERITY_CLEAR,
              }
          evt.severity = sev_dict.get(current, SEVERITY_WARNING)

          evt.eventClass = '/Status'

          if component and hasattr(component, 'healthy'):
              bool_dict = {
                  0: False,
                  1: True,
                  }
              if component.healthy != bool_dict.get(current, False):
                  @transact
                  def updateDb():
                      component.healthy = bool_dict.get(current, False)
                  updateDb()
